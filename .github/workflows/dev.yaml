name: Continuos Integration

on:
  pull_request:
    branches: [ master, develop ]
    types: [ synchronize ]
  push:
    branches: [ master ]

jobs:
  setup_python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: cat requirements
        run: |
          cat requirements/* > requirements.txt
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
      - name: Get pip cache directory path
        id: pip-cache-dir-path
        run: echo "::set-output name=dir::$(pip cache dir)"
      - uses: actions/cache@v2
        id: pip-cache # use this to check for `cache-hit` (`steps.pip-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.pip-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install project dependencies
        if: steps.pip-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install .

  setup_yarn:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install project dependencies
        run: yarn --prefer-offline

  test:
    needs: [ setup_yarn, setup_python ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get pip cache directory path
        id: pip-cache-dir-path
        run: echo "::set-output name=dir::$(pip cache dir)"
      - uses: actions/cache@v2
        id: pip-cache # use this to check for `cache-hit` (`steps.pip-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.pip-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Build static files
        run: |
          ./scripts/build.sh
      - name: Run pylint
        run: |
          ./scripts/linter.sh
      - name: Run pytest
        run: |
          ./scripts/test.sh

#  docker:
#    needs: test
#    if: github.ref == 'refs/heads/master'
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Build docker image
#        run: |
#          setup_prod
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      - name: Build and push
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          push: true
#          tags: vixxadesso/ati:latest

#  deploy:
#    needs: docker
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Save branch name
#        id: branch
#        run: echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}
#      - name: Executing remote ssh commands using ssh key
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USERNAME }}
#          key: ${{ secrets.KEY }}
#          port: ${{ secrets.PORT }}
#          script: |
#            echo "Deploy... ${{ steps.branch.outputs.short_ref }}"
